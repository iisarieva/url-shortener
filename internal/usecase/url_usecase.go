package usecase

import (
	"context"
	"crypto/rand"
	"encoding/base64"
	"strings"
	"time"

	"url-shortener/internal/domain/repository"

	"github.com/rs/zerolog/log"
)

type URLUseCase struct {
	repo repository.URLRepository
}

func NewURLUseCase(r repository.URLRepository) *URLUseCase {
	return &URLUseCase{repo: r}
}

// CreateShortURL –≥–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç –∫–æ—Ä–æ—Ç–∫–∏–π –∫–æ–¥, —Å–æ—Ö—Ä–∞–Ω—è–µ—Ç –µ–≥–æ –≤ Redis
func (u *URLUseCase) CreateShortURL(ctx context.Context, originalURL string) (string, error) {
	start := time.Now()

	shortCode := generateShortCode()

	err := u.repo.Save(ctx, shortCode, originalURL)
	if err != nil {
		log.Error().
			Err(err).
			Str("short_code", shortCode).
			Str("original_url", originalURL).
			Msg("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å –∫–æ—Ä–æ—Ç–∫—É—é —Å—Å—ã–ª–∫—É")
		return "", err
	}
	log.Info().
		Str("short_code", shortCode).
		Str("original_url", originalURL).
		Dur("duration", time.Since(start)).
		Msg("‚úÖ –°–æ–∫—Ä–∞—â–µ–Ω–∞ —Å—Å—ã–ª–∫–∞")
	return shortCode, nil
}

// GetOriginalURL –¥–æ—Å—Ç–∞—ë—Ç –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω—ã–π URL –ø–æ shortCode
func (u *URLUseCase) GetOriginalURL(ctx context.Context, shortCode string) (string, error) {
	originalURL, err := u.repo.Get(ctx, shortCode)
	if err != nil {
		log.Error().
			Err(err).
			Str("short_code", shortCode).
			Msg("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω–æ–≥–æ URL")
		return "", err
	}

	log.Info().
		Str("short_code", shortCode).
		Str("original_url", originalURL).
		Msg("üîó –ü–æ–ª—É—á–µ–Ω –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω—ã–π URL")

	return originalURL, nil
}

// DeleteShortURL —É–¥–∞–ª—è–µ—Ç —Å—Å—ã–ª–∫—É –ø–æ shortCode
func (u *URLUseCase) DeleteShortURL(ctx context.Context, shortCode string) error {
	err := u.repo.Delete(ctx, shortCode)
	if err != nil {
		log.Warn().
			Err(err).
			Str("short_code", shortCode).
			Msg("‚ö†Ô∏è –°—Å—ã–ª–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ –∏–ª–∏ —É–∂–µ —É–¥–∞–ª–µ–Ω–∞")
		return err
	}

	log.Info().
		Str("short_code", shortCode).
		Msg("üóëÔ∏è –°—Å—ã–ª–∫–∞ —É–¥–∞–ª–µ–Ω–∞")

	return nil
}

// –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è: –≥–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç —Å–ª—É—á–∞–π–Ω—ã–π short code
func generateShortCode() string {
	b := make([]byte, 6)
	_, _ = rand.Read(b)
	return strings.TrimRight(base64.URLEncoding.EncodeToString(b), "=")
}
