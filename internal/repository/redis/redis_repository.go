package redis

import (
	"context"
	"errors"
	"time"

	"github.com/redis/go-redis/v9"
	"github.com/rs/zerolog/log"
)

type RedisRepository struct {
	client *redis.Client
}

func NewRedisRepository(client *redis.Client) *RedisRepository {
	return &RedisRepository{client: client}
}

// Save —Å–æ—Ö—Ä–∞–Ω—è–µ—Ç –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω—ã–π URL —Å –∫–æ—Ä–æ—Ç–∫–∏–º –∫–æ–¥–æ–º –∫–∞–∫ –∫–ª—é—á–æ–º
func (r *RedisRepository) Save(ctx context.Context, shortCode string, originalURL string) error {
	err := r.client.Set(ctx, shortCode, originalURL, 24*time.Hour).Err()
	if err != nil {
		log.Error().
			Err(err).
			Str("short_code", shortCode).
			Str("original_url", originalURL).
			Msg("‚ùå Redis: –Ω–µ —É–¥–∞–ª–æ—Å—å —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å —Å—Å—ã–ª–∫—É")
		return err
	}

	log.Debug().
		Str("short_code", shortCode).
		Str("original_url", originalURL).
		Msg("üíæ Redis: —Å—Å—ã–ª–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞")
	return nil
}

// Get –ø–æ–ª—É—á–∞–µ—Ç –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω—ã–π URL –ø–æ shortCode
func (r *RedisRepository) Get(ctx context.Context, shortCode string) (string, error) {
	originalURL, err := r.client.Get(ctx, shortCode).Result()
	if err != nil {
		log.Error().
			Err(err).
			Str("short_code", shortCode).
			Msg("‚ùå Redis: –Ω–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Å—Å—ã–ª–∫—É")
		return "", err
	}

	log.Debug().
		Str("short_code", shortCode).
		Str("original_url", originalURL).
		Msg("üì¶ Redis: —Å—Å—ã–ª–∫–∞ –ø–æ–ª—É—á–µ–Ω–∞")
	return originalURL, nil
}

// Delete —É–¥–∞–ª—è–µ—Ç –∑–∞–ø–∏—Å—å –ø–æ shortCode
func (r *RedisRepository) Delete(ctx context.Context, shortCode string) error {
	count, err := r.client.Del(ctx, shortCode).Result()
	if err != nil {
		log.Error().
			Err(err).
			Str("short_code", shortCode).
			Msg("‚ùå Redis: –æ—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏")
		return err
	}
	if count == 0 {
		log.Warn().
			Str("short_code", shortCode).
			Msg("‚ö†Ô∏è Redis: —Å—Å—ã–ª–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è")
		return errors.New("not found")
	}

	log.Debug().
		Str("short_code", shortCode).
		Msg("üóëÔ∏è Redis: —Å—Å—ã–ª–∫–∞ —É–¥–∞–ª–µ–Ω–∞")
	return nil
}
